<tiny-hamburger>
    <div class="tiny-hamburger">
        <button class="tiny-hamburger__button button button--tiny-hamburger" onclick={ handleToggle }>
            <i class={ getIconClasses() } />
        </button>
        <div style="{ getStyles() }"
             class={ getModalClasses() }>
            <div class="tiny-hamburger__inner"></div>
        </div>
    </div>

    <script>

        /**
         *  tiny-hamburger.riot
         *
         *  Tiny Component for mobile navigation.
         *
         *  <tiny-hamburger>
         *      <ul>
         *          <li><a href="#">Home</a></li>
         *          <li><a href="#">Blog</a></li>
         *      </ul>
         *  </tiny-hamburger>
         *
         *  @author BjÃ¶rn Hase
         *  @license http://opensource.org/licenses/MIT The MIT License
         *  @link https://gitlab.tentakelfabrik.de/tentakelfabrik/tiny-components/tiny-hamburger Gitlab Repository
         *
         */

        export default
        {
            /**
             *
             *
             */
            state:
            {
                isOpen: false,
                animate: null
            },

            /**
             *  getting innerHTML and remove
             *
             *
             */
            onBeforeMount()
            {
                // getting helper and add component
                this.state.animate = this.props.animate;
                this.state.animate.setComponent(this);

                this.content = this.root.innerHTML
                this.root.innerHTML = ''
            },

            /**
             *  getting innerHTML and remove
             *
             *
             */
            onBeforeUnmount()
            {
                document.addEventListener('click', this.handleClick.bind(this));
                this.$('.tiny-hamburger__inner a').removeEventListener('click', this.handleClose.bind(this));
            },

            /**
             *  setting innerHTML
             *
             *
             */
            onMounted()
            {
                const wrapper = this.$('.tiny-hamburger__inner');
                wrapper.innerHTML = this.content;

                this.state.animate.prepareMounted();
                this.update();

                // adding for outer click and all a-tags click event to close
                document.addEventListener('click', this.handleClick.bind(this))
                this.$$('.tiny-hamburger__inner a').forEach((a) => {
                    a.addEventListener('click', this.handleClose.bind(this));
                });
            },

            /**
             *
             *  @return {string}
             */
            getStyles()
            {
                return this.state.animate.getStyles();
            },

            /**
             *
             *
             */
            getIconClasses()
            {
                return this.state.isOpen ?
                    'icon icon-tiny-hamburger-close' :
                    'icon icon-tiny-hamburger-open';
            },

            /**
             *
             *
             */
            getModalClasses()
            {
                return this.state.isOpen ?
                    'tiny-hamburger__modal tiny-hamburger__modal--open' :
                    'tiny-hamburger__modal tiny-hamburger__modal--closed';
            },

            /**
             *
             *
             */
            handleClick(event)
            {
                if (!this.root.contains(event.target)) {
                    this.handleClose();
                }
            },

            /**
             *
             *
             */
            handleOpen()
            {
                this.state.animate.prepareOpen();
                this.state.isOpen = true;

                this.update();
            },

            /**
             *
             *
             */
            handleClose()
            {
                this.state.animate.prepareClose();
                this.state.isOpen = false;

                this.update();
            },

            /**
             *  toggle modal
             *
             *
             */
            handleToggle()
            {
                if (this.state.isOpen === true) {
                    this.handleClose();
                } else {
                    this.handleOpen();
                }
            }
        }
    </script>
</tiny-hamburger>
